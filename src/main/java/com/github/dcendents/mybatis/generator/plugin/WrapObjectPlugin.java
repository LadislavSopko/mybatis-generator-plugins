package com.github.dcendents.mybatis.generator.plugin;

import static org.mybatis.generator.internal.util.StringUtility.stringHasValue;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.JavaVisibility;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.TopLevelClass;

public class WrapObjectPlugin extends PluginAdapter {
	private static final String TABLE_NAME = "fullyQualifiedTableName";
	private static final String OBJECT_CLASS = "objectClass";
	private static final String OBJECT_FIELD_NAME = "objectFieldName";
	private static final String INCLUDES = "includes";
	private static final String EXCLUDES = "excludes";

	private String tableName;
	private Class<?> objectClass;

	private Set<String> includes = new HashSet<>();
	private Set<String> excludes = new HashSet<>();

	private boolean tableMatch;
	private String objectFieldName;

	private Set<String> gettersToWrap = new HashSet<>();
	private Set<String> settersToWrap = new HashSet<>();

	@Override
	public boolean validate(List<String> warnings) {
		tableName = properties.getProperty(TABLE_NAME);
		String objectClassName = properties.getProperty(OBJECT_CLASS);

		String warning = "Property %s not set for plugin %s";
		if (!stringHasValue(tableName)) {
			warnings.add(String.format(warning, TABLE_NAME, this.getClass().getSimpleName()));
		}
		if (!stringHasValue(objectClassName)) {
			warnings.add(String.format(warning, OBJECT_CLASS, this.getClass().getSimpleName()));
		} else {
			try {
				objectClass = Class.forName(objectClassName);
			} catch (ClassNotFoundException ex) {
				warnings.add(String.format("Could not load class %s in plugin %s", objectClassName, this.getClass()
						.getSimpleName()));
			}
		}
		
		String includesString = properties.getProperty(INCLUDES);
		if (stringHasValue(includesString)) {
			includes.addAll(Arrays.asList(includesString.split(",")));
		}

		String excludesString = properties.getProperty(EXCLUDES);
		if (stringHasValue(excludesString)) {
			excludes.addAll(Arrays.asList(excludesString.split(",")));
		}

		objectFieldName = properties.getProperty(OBJECT_FIELD_NAME);
		if (!stringHasValue(objectFieldName)) {
			objectFieldName = StringUtils.uncapitalize(objectClass.getSimpleName());
		}

		return stringHasValue(tableName) && objectClass != null;
	}

	@Override
	public void initialized(IntrospectedTable introspectedTable) {
		tableMatch = tableName.equals(introspectedTable.getFullyQualifiedTableNameAtRuntime());
		super.initialized(introspectedTable);
	}

	@Override
	public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
		if (tableMatch) {
			FullyQualifiedJavaType type = new FullyQualifiedJavaType(objectClass.getName());
			Field field = new Field(objectFieldName, type);
			field.setVisibility(JavaVisibility.PRIVATE);
			field.setInitializationString(String.format("new %s()", objectClass.getSimpleName()));
			
			field.addJavaDocLine("/**");
			field.addJavaDocLine(" * This field was generated by MyBatis Generator.");
			field.addJavaDocLine(" * This field corresponds to the wrapped object.");
			field.addJavaDocLine(" *");
			field.addJavaDocLine(" * @mbggenerated");
			field.addJavaDocLine(" */");

			topLevelClass.addField(field);
			topLevelClass.addImportedType(type);
		}

		return super.modelBaseRecordClassGenerated(topLevelClass, introspectedTable);
	}

	@Override
	public boolean modelFieldGenerated(Field field, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn,
			IntrospectedTable introspectedTable, ModelClassType modelClassType) {
		if (tableMatch && wrapField(field)) {
			return false;
		} else {
			return super.modelFieldGenerated(field, topLevelClass, introspectedColumn, introspectedTable,
					modelClassType);
		}
	}
	
	private boolean wrapField(Field field) {
		if( (includes.isEmpty() || includes.contains(field.getName())) && !excludes.contains(field.getName()) ) {
			return objectClassHasFieldGetter(field);
		}
		
		return false;
	}

	private boolean objectClassHasFieldGetter(Field field) {
		java.lang.reflect.Method getter = null;

		String type = field.getType().getShortName();
		String prefix = type.equalsIgnoreCase("boolean") ? "is" : "get";

		String capitalized = StringUtils.capitalize(field.getName());
		String getterName = prefix + capitalized;
		String setterName = "set" + capitalized;

		try {
			getter = objectClass.getDeclaredMethod(getterName);
			gettersToWrap.add(getterName);
			settersToWrap.add(setterName);
		} catch (NoSuchMethodException ex) {
		}

		return getter != null;
	}

	@Override
	public boolean modelGetterMethodGenerated(Method method, TopLevelClass topLevelClass,
			IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) {
		if (gettersToWrap.contains(method.getName())) {
			method.getBodyLines().clear();
			method.addBodyLine(String.format("return this.%s.%s();", objectFieldName, method.getName()));
			return true;
		} else {
			return super.modelGetterMethodGenerated(method, topLevelClass, introspectedColumn, introspectedTable,
					modelClassType);
		}
	}

	@Override
	public boolean modelSetterMethodGenerated(Method method, TopLevelClass topLevelClass,
			IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) {
		if (settersToWrap.contains(method.getName())) {
			method.getBodyLines().clear();
			method.addBodyLine(String.format("this.%s.%s(%s);", objectFieldName, method.getName(), method.getParameters().get(0).getName()));
			return true;
		} else {
			return super.modelSetterMethodGenerated(method, topLevelClass, introspectedColumn, introspectedTable,
					modelClassType);
		}
	}

}
